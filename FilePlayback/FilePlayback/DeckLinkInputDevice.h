/* -LICENSE-START-
** Copyright (c) 2019 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#pragma once

#include <atomic>
#include <functional>
#include <vector>
#include <stdint.h>
#include "DeckLinkAPI_h.h"

enum class DeviceStatus {
	Idle,
	InputSignalUnknown,
	InputSignalInvalid,
	InputSignalValid,
	ErrorRestartingCapture,
};


class DeckLinkInputDevice : public IDeckLinkInputCallback
{
public:
	using DeviceStatusChangedCallback = std::function<void(DeviceStatus)>;
	using PixelFormatChangedCallback = std::function<void(BMDPixelFormat)>;
	using VideoFormatChangedCallback = std::function<void(BMDDisplayMode)>;
	using VideoFrameArrivedCallback = std::function<void(CComPtr<IDeckLinkVideoInputFrame>&)>;
	using AudioPacketArrivedCallback = std::function<void(CComPtr<IDeckLinkAudioInputPacket>&)>;

	DeckLinkInputDevice(CComPtr<IDeckLink> device);
	virtual ~DeckLinkInputDevice() {}

	bool			Init();
	const CString&	GetDeviceName() const { return m_deviceName; };
	bool			IsCapturing() const { return m_currentlyCapturing; };
	bool			SupportsFormatDetection() const { return (m_supportsFormatDetection == TRUE); };
	bool			StartCapture(BMDDisplayMode displayMode, BMDAudioSampleType audioSampleType, uint32_t audioChannelCount, IDeckLinkScreenPreviewCallback* screenPreviewCallback, IDeckLinkMemoryAllocator* allocator, bool applyDetectedInputMode);
	void			StopCapture();
	bool			RestartStreams();

	CComPtr<IDeckLink>						GetDeckLinkInstance() const { return m_deckLink; }
	CComQIPtr<IDeckLinkProfileManager>		GetDeviceProfileManager() const { return m_deckLinkProfileManager; };
	CComQIPtr<IDeckLinkInput>				GetDeckLinkInput() const { return m_deckLinkInput; };
	CComQIPtr<IDeckLinkConfiguration>		GetDeckLinkConfiguration() const { return m_deckLinkConfig; };
	CComQIPtr<IDeckLinkProfileAttributes>	GetDeckLinkAttributes() const { return m_deckLinkAttributes; };

	void						OnDeviceStatusChange(const DeviceStatusChangedCallback& callback) { m_deviceStatusChangedCallback = callback; }
	void						OnPixelFormatChange(const PixelFormatChangedCallback& callback) { m_pixelFormatChangedCallback = callback; }
	void						OnVideoFormatChange(const VideoFormatChangedCallback& callback) { m_videoFormatChangedCallback = callback; }
	void						OnVideoFrameArrival(const VideoFrameArrivedCallback& callback) { m_videoFrameArrivedCallback = callback; }
	void						OnAudioPacketArrival(const AudioPacketArrivedCallback& callback) { m_audioPacketArrivedCallback = callback; }

	// IUnknown interface
	virtual HRESULT	__stdcall	QueryInterface (REFIID iid, LPVOID *ppv) override;
	virtual ULONG	__stdcall	AddRef () override;
	virtual ULONG	__stdcall	Release () override;

	// IDeckLinkInputCallback interface
	virtual HRESULT __stdcall	VideoInputFormatChanged(BMDVideoInputFormatChangedEvents notificationEvents, IDeckLinkDisplayMode *newDisplayMode, BMDDetectedVideoInputFormatFlags detectedSignalFlags) override;
	virtual HRESULT __stdcall	VideoInputFrameArrived(IDeckLinkVideoInputFrame* videoFrame, IDeckLinkAudioInputPacket* audioPacket) override;

private:
	std::atomic<uint32_t>					m_refCount;
	//
	CString									m_deviceName;
	CComPtr<IDeckLink>						m_deckLink;
	CComQIPtr<IDeckLinkInput>				m_deckLinkInput;
	CComQIPtr<IDeckLinkConfiguration>		m_deckLinkConfig;
	CComQIPtr<IDeckLinkProfileAttributes>	m_deckLinkAttributes;
	CComQIPtr<IDeckLinkProfileManager>		m_deckLinkProfileManager;
	//
	DeviceStatusChangedCallback				m_deviceStatusChangedCallback;
	VideoFormatChangedCallback				m_videoFormatChangedCallback;
	PixelFormatChangedCallback				m_pixelFormatChangedCallback;
	VideoFrameArrivedCallback				m_videoFrameArrivedCallback;
	AudioPacketArrivedCallback				m_audioPacketArrivedCallback;
	//
	BOOL									m_supportsFormatDetection;
	bool									m_currentlyCapturing;
	bool									m_applyDetectedInputMode;
	DeviceStatus							m_lastValidFrameStatus;
};
